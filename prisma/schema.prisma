// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

// define 
// field first 
// relation second'

// User
model User {
  id                    String                @id @default(cuid())
  phone                 String?               @unique
  email                 String?               @unique
  username              String?               @unique
  name                  String
  password              String?
  bio                   String?
  avatar_url            String?
  gender                UserGender
  date_of_birth         DateTime?
  role                  UserRole              @default(player)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?             @updatedAt
  last_active_time      DateTime?
  status                UserStatus            @default(active)
  // Relation
  AuthenOTPs            AuthenOTP[]
  Wallet                Wallet?
  Match                 Match[]
  MatchJoin             MatchJoin[]
  receivedNotifications Notification[]        @relation("ReceivedNotifications")
  Message               Message[]
  GroupMessageJoin      GroupMessageJoin[]
  NotificationMessage   NotificationMessage[]
  Stadium               Stadium[]
  VoucherUser           VoucherUser[]
  Transaction           Transaction[]
  BookingYard           BookingYard[]
  Notification          Notification[]
  Blog                  Blog[]
  BlogUser              BlogUser[]
  BlogComment           BlogComment[]
  StadiumRating         StadiumRating[]
  BlogReact             BlogReact[]
}

enum UserStatus {
  active
  inactive
}

enum UserRole {
  player
  admin
  coach
  stadium
  staff
}

enum UserGender {
  men
  women
  other
}

// Authen OTP
model AuthenOTP {
  id         String   @id @default(cuid())
  user_id    String
  created_at DateTime @default(now())
  expired_at DateTime
  type       OTPType
  user       User     @relation(fields: [user_id], references: [id])
}

enum OTPType {
  sms
  email
}

// Wallet
model Wallet {
  user_id    String   @unique
  balance    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

// Sport
model Sport {
  sport_name  String  @id @unique
  value       String?
  icon        String?
  Match       Match[]
  StadiumYard Yard[]
  Blog        Blog[]
}

// Match
model Match {
  match_id       String       @id @default(cuid())
  match_name     String
  user_create_id String
  cid            String
  sport_name     String
  total_join     Int          @default(1)
  maximum_join   Int          @default(10)
  start_time     DateTime
  end_time       DateTime
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  status         MatchStatus  @default(upcomming)
  // Relation
  user_create    User         @relation(fields: [user_create_id], references: [id])
  sport          Sport        @relation(fields: [sport_name], references: [sport_name])
  match_join     MatchJoin[]
  option         MatchOption?

  // index 
  @@index([start_time, sport_name, status], name: "match_index")
  @@index([sport_name, status], name: "match_index_2")
}

model MatchJoin {
  id           String          @id @default(cuid())
  user_join_id String
  match_id     String
  time_join_at DateTime        @default(now())
  status       MatchJoinStatus @default(pending)
  // Relation
  match        Match           @relation(fields: [match_id], references: [match_id])
  user_join    User            @relation(fields: [user_join_id], references: [id])
}

model MatchOption {
  match_id String  @unique
  budget   Float?
  note     String?
  // Relation
  match    Match   @relation(fields: [match_id], references: [match_id])
}

enum MatchStatus {
  completed
  upcomming
  cancelled
}

enum MatchJoinStatus {
  pending
  accepted
  rejected
}

// Notification
model Notification {
  notification_id String   @id @default(cuid())
  receiver_id     String
  content         String
  created_at      DateTime @default(now())
  is_read         Boolean  @default(false)

  // Relation
  receiver User    @relation("ReceivedNotifications", fields: [receiver_id], references: [id])
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
}

// Message Chat
model Message {
  message_id          String                @id @default(cuid())
  message_to          String
  message_from        String
  content             String
  created_at          DateTime              @default(now())
  // Relation
  user_from           User                  @relation(fields: [message_from], references: [id])
  group_message_to    GroupMessage          @relation(fields: [message_to], references: [group_message_id])
  NotificationMessage NotificationMessage[]
}

model GroupMessage {
  group_message_id       String             @id @default(cuid())
  group_message_name     String
  group_message_thumnail String?
  created_at             DateTime           @default(now())
  expired_at             DateTime?
  last_active_time       DateTime?          @default(now())
  // Relation
  type                   GroupMessageType
  GroupMessageJoin       GroupMessageJoin[]
  Message                Message[]
}

enum GroupMessageType {
  single
  match
  club
}

model GroupMessageJoin {
  id               String       @id @default(cuid())
  group_message_id String
  user_join_id     String
  created_at       DateTime     @default(now())
  // Relation
  group_message    GroupMessage @relation(fields: [group_message_id], references: [group_message_id])
  user_join        User         @relation(fields: [user_join_id], references: [id])
}

model NotificationMessage {
  id         String   @id @default(cuid())
  user_id    String
  message_id String
  is_seen    Boolean  @default(false)
  created_at DateTime @default(now())
  // Relation
  user       User     @relation(fields: [user_id], references: [id])
  message    Message  @relation(fields: [message_id], references: [message_id])
}

// Stadium
model Stadium {
  id                  String          @id @default(cuid())
  stadium_owner_id    String
  stadium_name        String
  stadium_lat         Float
  stadium_long        Float
  stadium_address     String
  stadium_thumnail    String?
  stadium_time        String?
  stadium_rating      Float           @default(0)
  stadium_description String
  stadium_status      StadiumStatus   @default(approved)
  created_at          DateTime        @default(now())
  // Relation
  owner               User            @relation(fields: [stadium_owner_id], references: [id])
  yards               Yard[]
  ratings             StadiumRating[]
}

model StadiumRating {
  id         String   @id @default(cuid())
  stadium_id String
  user_id    String
  rating     Float
  comment    String   @default("no comment")
  created_at DateTime @default(now())
  // Relation
  stadium    Stadium  @relation(fields: [stadium_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
}

model Yard {
  yard_id          String        @id @default(cuid())
  stadium_id       String
  yard_name        String
  yard_sport       String
  yard_description String
  price_per_hour   Float
  yard_status      YardStatus    @default(avaiable)
  created_at       DateTime      @default(now())
  // Relation
  stadium          Stadium       @relation(fields: [stadium_id], references: [id])
  sport            Sport         @relation(fields: [yard_sport], references: [sport_name])
  BookingYard      BookingYard[]
}

enum StadiumStatus {
  pending
  approved
  rejected
  banned
  deleted
  mantainance
}

enum YardStatus {
  booked
  avaiable
  mantainance
  deleted
}

model BookingYard {
  id         String        @id @default(cuid())
  yard_id    String
  user_id    String
  time_start DateTime
  time_end   DateTime
  status     BookingStatus @default(pending)
  created_at DateTime      @default(now())
  // Relation
  yard       Yard          @relation(fields: [yard_id], references: [yard_id])
  user       User          @relation(fields: [user_id], references: [id])
}

enum BookingStatus {
  pending
  accepted
  rejected
  cancelled
  completed
}

model Voucher {
  id           String        @id @default(cuid())
  voucher_name String
  voucher_code String        @unique
  value        Float
  created_at   DateTime      @default(now())
  expired_at   DateTime
  VoucherUser  VoucherUser[]
}

model VoucherUser {
  id         String        @id @default(cuid())
  user_id    String
  voucher_id String
  created_at DateTime      @default(now())
  status     VoucherStatus @default(active)
  // Relation
  user       User          @relation(fields: [user_id], references: [id])
  voucher    Voucher       @relation(fields: [voucher_id], references: [id])
}

enum VoucherStatus {
  active
  expired
  used
}

// Transaction

model Transaction {
  id               String            @id @default(cuid())
  user_id          String
  transaction_code String?           @unique
  amount           Float
  bank_account     String?
  bank_name        String?
  bank_short_name  String?
  bank_logo        String?
  rejected_reason  String?
  type             TransactionType
  method           TransactionMethod
  status           TransactionStatus @default(pending)
  created_at       DateTime          @default(now())
  expired_at       DateTime?
  // Relation
  user             User              @relation(fields: [user_id], references: [id])
}

enum TransactionType {
  deposit
  withdraw
  booking
}

enum TransactionMethod {
  momo
  bank
}

enum TransactionStatus {
  pending
  completed
  rejected
  cancelled
}

// Blog

model Blog {
  id              String        @id @default(cuid())
  blog_owner      String
  blog_content    String
  blog_address    String?
  blog_sport      String?
  total_like      Int           @default(0)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  status          BlogStatus?   @default(approved)
  // Relation
  owner           User          @relation(fields: [blog_owner], references: [id])
  blog_link       BlogLink[]
  BlogUser        BlogUser[]
  Sport           Sport?        @relation(fields: [sportSport_name], references: [sport_name])
  sportSport_name String?
  BlogComment     BlogComment[]
  BlogReact       BlogReact[]
}

enum BlogStatus {
  approved
  deleted
}

model BlogUser {
  id         String   @id @default(cuid())
  user_id    String
  blog_id    String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  // Relation
  user       User     @relation(fields: [user_id], references: [id])
  blog       Blog     @relation(fields: [blog_id], references: [id])
}

model BlogLink {
  id      String       @id @default(cuid())
  blog_id String
  url     String
  type    BlogLinkType
  // Relation
  Blog    Blog?        @relation(fields: [blog_id], references: [id])
}

enum BlogLinkType {
  image
  video
}

model BlogComment {
  id             String   @id @default(cuid())
  user_id        String
  blog_id        String
  parent_comment String   @default("")
  content        String
  created_at     DateTime @default(now())
  // Relation
  user           User     @relation(fields: [user_id], references: [id])
  blog           Blog     @relation(fields: [blog_id], references: [id])
}

model BlogReact {
  id      String @id @default(cuid())
  blog_id String
  user_id String
  // Relation
  blog    Blog   @relation(fields: [blog_id], references: [id])
  user    User   @relation(fields: [user_id], references: [id])
}
