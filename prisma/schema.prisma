// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

// define 
// field first 
// relation second'

// User
model User {
  id               String      @id @default(cuid())
  phone            String?     @unique
  email            String?     @unique
  name             String
  password         String
  bio              String?
  avatar_url       String?
  gender           UserGender
  date_of_birth    DateTime?
  role             UserRole    @default(player)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?   @updatedAt
  last_active_time DateTime?
  status           UserStatus  @default(active)
  // Relation
  AuthenOTPs       AuthenOTP[]
  Wallet           Wallet?
  Match            Match[]
  MatchJoin        MatchJoin[]
}

enum UserStatus {
  active
  inactive
}

enum UserRole {
  player
  admin
  coach
  stadium
  staff
}

enum UserGender {
  men
  women
  other
}

// Authen OTP
model AuthenOTP {
  id         String   @id @default(cuid())
  user_id    String
  created_at DateTime @default(now())
  expired_at DateTime
  type       OTPType
  user       User     @relation(fields: [user_id], references: [id])
}

enum OTPType {
  sms
  email
}

// Wallet
model Wallet {
  wakket_id  String   @id @default(cuid())
  user_id    String   @unique
  balance    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

// Sport
model Sport {
  sport_name String  @id @unique
  Match      Match[]
}

// Match
model Match {
  match_id       String      @id @default(cuid())
  match_name     String
  user_create_id String
  place_id       String
  sport_name     String
  total_join     Int         @default(1)
  maximum_join   Int         @default(10)
  start_time     DateTime
  end_time       DateTime
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  status         MatchStatus @default(upcomming)
  // Relation
  user_create    User        @relation(fields: [user_create_id], references: [id])
  sport          Sport       @relation(fields: [sport_name], references: [sport_name])
  MatchJoin      MatchJoin[]

  // index 
  @@index([start_time, sport_name], name: "match_index")
}

model MatchJoin {
  id           String          @id @default(cuid())
  user_join_id String
  match_id     String
  time_join_at DateTime        @default(now())
  status       MatchJoinStatus @default(pending)
  // Relation
  match        Match           @relation(fields: [match_id], references: [match_id])
  user_join    User            @relation(fields: [user_join_id], references: [id])
}

enum MatchStatus {
  completed
  upcomming
  cancelled
}

enum MatchJoinStatus {
  pending
  accepted
  rejected
}
