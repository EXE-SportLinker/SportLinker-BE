// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

// define 
// field first 
// relation second'

// User
model User {
  id                    String             @id @default(cuid())
  phone                 String?            @unique
  email                 String?            @unique
  name                  String
  password              String
  bio                   String?
  avatar_url            String?
  gender                UserGender
  date_of_birth         DateTime?
  role                  UserRole           @default(player)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime?          @updatedAt
  last_active_time      DateTime?
  status                UserStatus         @default(active)
  // Relation
  AuthenOTPs            AuthenOTP[]
  Wallet                Wallet?
  Match                 Match[]
  MatchJoin             MatchJoin[]
  receivedNotifications Notification[]     @relation("ReceivedNotifications")
  sentNotifications     Notification[]     @relation("SentNotifications")
  messageTo             Message[]          @relation("MessageTo")
  messageFrom           Message[]          @relation("MessageFrom")
  GroupMessageJoin      GroupMessageJoin[]
}

enum UserStatus {
  active
  inactive
}

enum UserRole {
  player
  admin
  coach
  stadium
  staff
}

enum UserGender {
  men
  women
  other
}

// Authen OTP
model AuthenOTP {
  id         String   @id @default(cuid())
  user_id    String
  created_at DateTime @default(now())
  expired_at DateTime
  type       OTPType
  user       User     @relation(fields: [user_id], references: [id])
}

enum OTPType {
  sms
  email
}

// Wallet
model Wallet {
  wakket_id  String   @id @default(cuid())
  user_id    String   @unique
  balance    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

// Sport
model Sport {
  sport_name String  @id @unique
  value      String?
  icon       String?
  Match      Match[]
}

// Match
model Match {
  match_id       String       @id @default(cuid())
  match_name     String
  user_create_id String
  cid            String
  sport_name     String
  total_join     Int          @default(1)
  maximum_join   Int          @default(10)
  start_time     DateTime
  end_time       DateTime
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  status         MatchStatus  @default(upcomming)
  // Relation
  user_create    User         @relation(fields: [user_create_id], references: [id])
  sport          Sport        @relation(fields: [sport_name], references: [sport_name])
  match_join     MatchJoin[]
  option         MatchOption?

  // index 
  @@index([start_time, sport_name, status], name: "match_index")
  @@index([sport_name, status], name: "match_index_2")
}

model MatchJoin {
  id           String          @id @default(cuid())
  user_join_id String
  match_id     String
  time_join_at DateTime        @default(now())
  status       MatchJoinStatus @default(pending)
  // Relation
  match        Match           @relation(fields: [match_id], references: [match_id])
  user_join    User            @relation(fields: [user_join_id], references: [id])
}

model MatchOption {
  match_id String @unique
  budget   Float?
  // Relation
  match    Match  @relation(fields: [match_id], references: [match_id])
}

enum MatchStatus {
  completed
  upcomming
  cancelled
}

enum MatchJoinStatus {
  pending
  accepted
  rejected
}

// Notification
model Notification {
  notification_id String   @id @default(cuid())
  receiver_id     String
  sender_id       String
  content         String
  created_at      DateTime @default(now())
  is_read         Boolean  @default(false)

  // Relation
  receiver User @relation("ReceivedNotifications", fields: [receiver_id], references: [id])
  sender   User @relation("SentNotifications", fields: [sender_id], references: [id])
}

// Message Chat
model Message {
  message_id   String   @id @default(cuid())
  message_to   String
  message_from String
  content      String
  created_at   DateTime @default(now())
  // Relation
  user_to      User     @relation("MessageTo", fields: [message_to], references: [id])
  user_from    User     @relation("MessageFrom", fields: [message_from], references: [id])
}

model GroupMessage {
  group_message_id       String             @id @default(cuid())
  group_message_name     String
  group_message_thumnail String?
  created_at             DateTime           @default(now())
  expired_at             DateTime?
  last_active_time       DateTime?          @default(now())
  // Relation
  type                   GroupMessageType
  GroupMessageJoin       GroupMessageJoin[]
}

enum GroupMessageType {
  single
  match
  club
}

model GroupMessageJoin {
  id               String       @id @default(cuid())
  group_message_id String
  user_join_id     String
  created_at       DateTime     @default(now())
  // Relation
  group_message    GroupMessage @relation(fields: [group_message_id], references: [group_message_id])
  user_join        User         @relation(fields: [user_join_id], references: [id])
}
